{"version":3,"sources":["components/Card.js","components/BarChart.js","components/LoadingScreen.js","components/Notify.js","components/WeatherView.js","contianers/WeatherViewContainer.js","actions/index.js","reducers/index.js","sagas/index.js","components/App.js","serviceWorker.js","index.js"],"names":["React","memo","props","Card","className","onClick","onSelect","cardData","CardActionArea","CardContent","Typography","gutterBottom","temperatureType","tempC","tempF","displayDate","humidity","weather","BarChart","height","chartType","loader","data","chartData","chartDataC","chartDataF","options","legend","position","rootProps","LoadingScreen","CircularProgress","Notify","error","console","classVal","message","WeatherView","temperatureChange","bind","backwardClick","forwardClick","setBarChart","materialClasses","makeStyles","theme","root","flexGrow","this","getWeatherData","weatherData","length","loading","curPageData","getPageData","curPageIndex","getActiveChartData","event","getCurTempType","target","value","Grid","container","item","xs","FormControl","component","RadioGroup","aria-label","name","onChange","row","FormControlLabel","control","Radio","color","label","labelPlacement","IconButton","fontSize","pageSize","map","obj","index","Object","keys","activeChartData","date","key","hasError","Component","mapDispatchToProps","type","pageIndex","connect","state","reducer","action","startIndex","slice","fetchWeatherData","fetchWeatherWatch","rootSaga","call","axios","get","res","cod","put","formatWeatherData","months","i","list","dt_txt","split","main","temp","findIndex","push","fragmentsF","fragmentsC","wIndex","weatherArr","description","count","Math","ceil","reduce","prev","cur","sort","a","b","Number","j","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","App","CssBaseline","WeatherViewContainer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAkEeA,MAAMC,MA1DC,SAACC,GAMnB,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,YAAYC,QALhC,WACIH,EAAMI,SAASJ,EAAMK,YAKjB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYN,UAAU,YAAYO,cAAY,GAA9C,SAGA,kBAACD,EAAA,EAAD,CAAYN,UAAU,aAAaO,cAAY,GACf,YAA1BT,EAAMU,gBAAiCV,EAAMK,SAASM,MAAQX,EAAMK,SAASO,OAEnF,kBAACJ,EAAA,EAAD,CAAYN,UAAU,YAAYO,cAAY,GAA9C,SAGA,kBAACD,EAAA,EAAD,CAAYN,UAAU,aAAaO,cAAY,GAC1CT,EAAMK,SAASQ,aAEpB,kBAACL,EAAA,EAAD,CAAYN,UAAU,YAAYO,cAAY,GAA9C,aAGA,kBAACD,EAAA,EAAD,CAAYN,UAAU,aAAaO,cAAY,GAC1CT,EAAMK,SAASS,UAEpB,kBAACN,EAAA,EAAD,CAAYN,UAAU,YAAYO,cAAY,GAA9C,YAGA,kBAACD,EAAA,EAAD,CAAYC,cAAY,EAACP,UAAU,+BAC9BF,EAAMK,SAASU,e,QCJzBC,EAhCE,SAAChB,GAChB,OACE,kBAAC,IAAD,CACEiB,OAAQ,QACRC,UAAU,MACVC,OAAQ,yBAAKjB,UAAU,gBAAf,qBACRkB,KAAiC,YAA1BpB,EAAMU,gBAAiCV,EAAMqB,UAAUC,WAAatB,EAAMqB,UAAUE,WAC3FC,QAAS,CACPC,OAAQ,CAAEC,SAAU,SAEtBC,UAAW,CAAE,cAAe,Q,SCFnBC,EATO,WACpB,OACE,yBAAK1B,UAAU,iCACb,yBAAKA,UAAU,eAAf,eACA,kBAAC2B,EAAA,EAAD,Q,gGCYSC,EAhBA,SAAC9B,GAGZ,OAFIA,EAAM+B,OACNC,QAAQD,MAAM/B,EAAM+B,OAEpB,yBAAK7B,UAAU,iCACX,wBAAIA,UAAWF,EAAMiC,UAAWjC,EAAMkC,WCqJnCC,E,YA5IZ,WAAYnC,GAAQ,IAAD,8BAChB,4CAAMA,KACDoC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKI,gBAAkBC,aAAW,SAAAC,GAAK,MAAK,CACzCC,KAAM,CACHC,SAAU,OARA,E,iFAchBC,KAAK9C,MAAM+C,mB,2CAIPD,KAAK9C,MAAMgD,YAAYC,OAAS,IAAMH,KAAK9C,MAAMkD,SAA6C,IAAlCJ,KAAK9C,MAAMmD,YAAYF,QACpFH,KAAK9C,MAAMoD,YAAY,K,qCAI1BN,KAAK9C,MAAMoD,YAAYN,KAAK9C,MAAMqD,aAAe,K,sCAIjDP,KAAK9C,MAAMoD,YAAYN,KAAK9C,MAAMqD,aAAe,K,kCAGxChD,GACTyC,KAAK9C,MAAMsD,mBAAmBjD,K,wCAGfkD,GACfT,KAAK9C,MAAMwD,eAAeD,EAAME,OAAOC,S,+BAGhC,IAAD,OACN,OACG,yBAAKxD,UAAU,0BAER4C,KAAK9C,MAAMmD,YAAYF,OAAS,EAC9B,yBAAK/C,UAAU,gBACZ,yBAAKA,UAAW4C,KAAKL,gBAAgBG,MAClC,kBAACe,EAAA,EAAD,CAAMC,WAAS,GACZ,kBAACD,EAAA,EAAD,CAAMzD,UAAU,sBAAsB2D,MAAI,EAACC,GAAI,IAC5C,kBAACC,EAAA,EAAD,CAAaC,UAAU,YACpB,kBAACC,EAAA,EAAD,CAAY/D,UAAU,mBAAmBgE,aAAW,0BAA0BC,KAAK,mBAAmBT,MAAOZ,KAAK9C,MAAMU,gBAAiB0D,SAAUtB,KAAKV,kBAAmBiC,KAAG,GAC3K,kBAACC,EAAA,EAAD,CACGZ,MAAM,UACNa,QAAS,kBAACC,EAAA,EAAD,CAAOC,MAAM,YACtBC,MAAM,UACNC,eAAe,MACfzE,UAAU,YAEb,kBAACoE,EAAA,EAAD,CACGZ,MAAM,aACNa,QAAS,kBAACC,EAAA,EAAD,CAAOC,MAAM,YACtBC,MAAM,aACNC,eAAe,MACfzE,UAAU,kBAKtB,kBAACyD,EAAA,EAAD,CAAMzD,UAAU,uBAAuB2D,MAAI,EAACC,GAAI,GAC3ChB,KAAK9C,MAAMqD,aAAe,EACxB,kBAACuB,EAAA,EAAD,CAAYH,MAAM,UAAUP,aAAW,aAAa/D,QAAS2C,KAAKR,eAChE,kBAAC,IAAD,CAAkBuC,SAAS,WACb,MAGvB,kBAAClB,EAAA,EAAD,CAAMzD,UAAU,wBAAwB2D,MAAI,EAACC,GAAI,GAC1ChB,KAAK9C,MAAMqD,aAAeP,KAAK9C,MAAM8E,SAAYhC,KAAK9C,MAAM8E,SAAYhC,KAAK9C,MAAMgD,YAAYC,OAC/F,kBAAC2B,EAAA,EAAD,CAAYH,MAAM,UAAUP,aAAW,cAAc/D,QAAS2C,KAAKP,cACjE,kBAAC,IAAD,CAAqBsC,SAAS,WAChB,MAIpB/B,KAAK9C,MAAMmD,YAAY4B,KAAI,SAACC,EAAKC,GAAN,OAAgB,kBAACtB,EAAA,EAAD,CAAMzD,UAAYgF,OAAOC,KAAK,EAAKnF,MAAMoF,iBAAiBnC,OAAS,GAAK+B,EAAIK,OAAS,EAAKrF,MAAMoF,gBAAgBC,KAAQ,wBAA0B,YAAaC,IAAKL,EAAOpB,MAAI,EAACC,GAAI,GAAG,kBAAC,EAAD,CAAezD,SAAU2E,EAAK5E,SAAU,EAAKoC,YAAa9B,gBAAiB,EAAKV,MAAMU,sBAE3T,kBAACiD,EAAA,EAAD,CAAMzD,UAAU,sBAAsB2D,MAAI,EAACC,GAAI,IAExCoB,OAAOC,KAAKrC,KAAK9C,MAAMoF,iBAAiBnC,OAAS,EAAK,kBAAC,EAAD,CAAU5B,UAAWyB,KAAK9C,MAAMoF,gBAAiB1E,gBAAiBoC,KAAK9C,MAAMU,kBAAsB,yBAAKR,UAAU,oBAAf,0EAOrK4C,KAAK9C,MAAMuF,SACT,kBAAC,EAAD,CAAQtD,SAAS,YAAYF,MAAOe,KAAK9C,MAAM+B,MAAOG,QAAQ,iFAC5DY,KAAK9C,MAAMkD,SAA6C,IAAlCJ,KAAK9C,MAAMgD,YAAYC,OAAuE,kBAAC,EAAD,MAAvD,kBAAC,EAAD,CAAQf,QAAQ,yC,GA/F7EsD,aCEpBC,EAAqB,CACvBrC,YAAa,SAAA6B,GAAK,OCfK,SAACA,GAAD,MAAY,CACnCS,KAAM,gBACNC,UAAWV,GDaW7B,CAAY6B,IAClC3B,mBAAoB,SAAAlC,GAAI,OCXM,SAACA,GAAD,MAAW,CACzCsE,KAAM,wBACNrE,UAAWD,GDSiBkC,CAAmBlC,IAC/CoC,eAAgB,SAAApC,GAAI,OCPM,SAACA,GAAD,MAAW,CACrCsE,KAAM,gBACNhF,gBAAiBU,GDKOoC,CAAepC,IACvC2B,eCtB0B,iBAAO,CACjC2C,KAAM,sBDwBKE,eArBS,SAAAC,GAAK,MAAK,CAC9B7C,YAAa6C,EAAM7C,YACnBG,YAAa0C,EAAM1C,YACnBzC,gBAAiBmF,EAAMnF,gBACvB2C,aAAcwC,EAAMxC,aACpBH,QAAS2C,EAAM3C,QACfqC,SAAUM,EAAMN,SAChBxD,MAAO8D,EAAM9D,MACbqD,gBAAiBS,EAAMT,gBACvBN,SAAUe,EAAMf,YAchBW,EAFWG,CAGbzD,G,imBE5BF,IAmBe2D,EAnBC,WAAyL,IAAxLD,EAAuL,uDAA/K,CAAE7C,YAAa,GAAIG,YAAa,GAAIzC,gBAAiB,aAAc2C,aAAc,EAAGH,SAAS,EAAOqC,UAAU,EAAOxD,MAAO,GAAIqD,gBAAiB,GAAIN,SAAU,GAAKiB,EAAW,uCACpM,OAAQA,EAAOL,MACX,IAAK,mBACD,OAAO,EAAP,GAAYG,EAAZ,CAAmB3C,SAAS,IAChC,IAAK,wBACD,OAAO,EAAP,GAAY2C,EAAZ,CAAmB7C,YAAY,YAAK+C,EAAO3E,MAAO8B,SAAS,IAC/D,IAAK,sBACD,OAAO,EAAP,GAAY2C,EAAZ,CAAmBN,UAAU,EAAMxD,MAAOgE,EAAOhE,MAAOmB,SAAS,IACrE,IAAK,gBACD,IAAM8C,EAAaD,EAAOJ,UAAYE,EAAMf,SAC5C,OAAO,EAAP,GAAYe,EAAZ,CAAmBxC,aAAc0C,EAAOJ,UAAWxC,YAAY,YAAK0C,EAAM7C,YAAYiD,MAAMD,EAAYA,EAAaH,EAAMf,WAAYM,gBAAiB,KAC5J,IAAK,gBACD,OAAO,EAAP,GAAYS,EAAZ,CAAmBnF,gBAAiBqF,EAAOrF,kBAC/C,IAAK,wBACD,OAAO,EAAP,GAAYmF,EAAZ,CAAmBT,gBAAiBW,EAAO1E,YAC/C,QACI,OAAOwE,I,qDCbFK,I,WAyDPC,I,WAIeC,IA7DlB,SAAUF,KAAV,uEAEa,OAFb,kBAEmBG,YAAKC,IAAMC,IAAK,8GAFnC,UAGsB,SADfC,EAFP,QAGSpF,KAAKqF,IAHd,gBAIK,OAJL,SAIWC,YAAI,CAAEhB,KAAM,wBAAyBtE,KAAMuF,GAAkBH,EAAIpF,QAJ5E,8BAMK,OANL,UAMWsF,YAAI,CAAEhB,KAAM,sBAAuB3D,MAAOyE,IANrD,gCASC,OATD,oCASOE,YAAI,CAAEhB,KAAM,sBAAuB3D,MAAK,OAT/C,sDAaP,SAAS4E,GAAkBH,GAEvB,IADA,IAAIxD,EAAc,GAAI4D,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,MAAO,MAAO,OADpF,WAEnBC,GACL,IAA6C5B,EAAOrE,EAAOD,EAAvD0E,EAAOmB,EAAIM,KAAKD,GAAGE,OAAOC,MAAM,KAAK,GAIzC,GAHApG,EAAQ,KAAC4F,EAAIM,KAAKD,GAAGI,KAAKC,KAAO,QAAoB,GACrDvG,EAAQ6F,EAAIM,KAAKD,GAAGI,KAAKC,KAAO,QAChCjC,EAAQjC,EAAYmE,WAAU,SAACnC,GAAD,OAASK,IAASL,EAAIK,UACvC,GAIT,GAHArC,EAAYiC,GAAOnE,SAASsG,KAAKZ,EAAIM,KAAKD,GAAGI,KAAKnG,UAClDkC,EAAYiC,GAAOoC,WAAWD,KAAKxG,GACnCoC,EAAYiC,GAAOqC,WAAWF,KAAKzG,GAC/B6F,EAAIM,KAAKD,GAAG9F,QAAQkC,OAAS,EAAG,CAChC,IAAIsE,EAASvE,EAAYiC,GAAOuC,WAAWL,WAAU,SAACnC,GAAD,OAASwB,EAAIM,KAAKD,GAAG9F,QAAQ,GAAG0G,cAAgBzC,EAAIjE,WACrGwG,GAAU,EACVvE,EAAYiC,GAAOuC,WAAWD,GAAQG,OAAS,EAE/C1E,EAAYiC,GAAOuC,WAAWJ,KAAK,CAAErG,QAASyF,EAAIM,KAAKD,GAAG9F,QAAQ,GAAG0G,YAAaC,MAAO,SAE9F,CACH,IAAI1C,EAAM,CAAEK,KAAMA,EAAMvE,SAAU,CAAC0F,EAAIM,KAAKD,GAAGI,KAAKnG,UAAW0G,WAAY,GAAIH,WAAY,CAACzG,GAAQ0G,WAAY,CAAC3G,IAC7G6F,EAAIM,KAAKD,GAAG9F,QAAQkC,OAAS,IAC7B+B,EAAIwC,WAAa,CAAC,CAAEzG,QAASyF,EAAIM,KAAKD,GAAG9F,QAAQ,GAAG0G,YAAaC,MAAO,KAC5E1E,EAAYoE,KAAKpC,KApBhB6B,EAAI,EAAGA,EAAIL,EAAIM,KAAK7D,OAAQ4D,IAAM,EAAlCA,GAuBT,IAAK,IAAI5B,EAAQ,EAAGA,EAAQjC,EAAYC,OAAQgC,IAAS,CACrDjC,EAAYiC,GAAOrE,MAAQ+G,KAAKC,KAAK5E,EAAYiC,GAAOoC,WAAWQ,QAAO,SAACC,EAAMC,GAAP,OAAeD,EAAOC,IAAK,GAAK/E,EAAYiC,GAAOoC,WAAWpE,QAAU,IAClJD,EAAYiC,GAAOtE,MAAQgH,KAAKC,KAAK5E,EAAYiC,GAAOqC,WAAWO,QAAO,SAACC,EAAMC,GAAP,OAAeD,EAAOC,IAAK,GAAK/E,EAAYiC,GAAOqC,WAAWrE,QAAU,IAClJD,EAAYiC,GAAOnE,SAAW6G,KAAKC,KAAK5E,EAAYiC,GAAOnE,SAAS+G,QAAO,SAACC,EAAMC,GAAP,OAAeD,EAAOC,IAAK,GAAK/E,EAAYiC,GAAOnE,SAASmC,QACnID,EAAYiC,GAAOuC,WAAWvE,OAAS,IACvCD,EAAYiC,GAAOlE,QAAUiC,EAAYiC,GAAOuC,WAAWQ,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAER,MAAQO,EAAEP,SAAO,GAAG3G,SACpGiC,EAAYiC,GAAOpE,YAAcmC,EAAYiC,GAAOI,KAAK2B,MAAM,KAAK,GAAK,IAAMJ,EAAOuB,OAAOnF,EAAYiC,GAAOI,KAAK2B,MAAM,KAAK,GAAK,IAAM,IAAMhE,EAAYiC,GAAOI,KAAK2B,MAAM,KAAK,GAAGf,MAAM,EAAG,GAChMjD,EAAYiC,GAAO3D,WAAa,GAChC0B,EAAYiC,GAAO1D,WAAa,GAChCyB,EAAYiC,GAAO3D,WAAW8F,KAAK,CAAC,IAAK,SACzCpE,EAAYiC,GAAO1D,WAAW6F,KAAK,CAAC,IAAK,SACzC,IAAK,IAAIgB,EAAI,EAAGA,EAAIpF,EAAYiC,GAAOoC,WAAWpE,OAAQmF,IACtDpF,EAAYiC,GAAO1D,WAAW6F,KAAK,CAACO,KAAKC,KAAK5E,EAAYiC,GAAOoC,WAAWe,IAAM,IAAKT,KAAKC,KAAK5E,EAAYiC,GAAOoC,WAAWe,MAC/HpF,EAAYiC,GAAO3D,WAAW8F,KAAK,CAACO,KAAKC,KAAK5E,EAAYiC,GAAOqC,WAAWc,IAAM,IAAKT,KAAKC,KAAK5E,EAAYiC,GAAOqC,WAAWc,MAGvI,OAAOpF,EAGX,SAAUmD,KAAV,iEACI,OADJ,SACUkC,YAAW,mBAAoBnC,IADzC,uCAIe,SAAUE,KAAV,iEACX,OADW,SACLD,KADK,uC,oBCrDTmC,GAAiBC,cAEjBC,GAAQC,YACZ3C,EACA4C,YAAgBJ,GAAgBK,WAElCL,GAAeM,IAAIxC,IAaJyC,OAXf,WACE,OACE,kBAAC,IAAD,CAAUL,MAAOA,IACf,yBAAKtI,UAAU,OACb,kBAAC4I,GAAA,EAAD,MACA,kBAACC,EAAD,SCZYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e41a1f14.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst CardComponent = (props) => {\r\n\r\n    function setActiveChartData() {\r\n        props.onSelect(props.cardData);\r\n    }\r\n\r\n    return (\r\n        <Card className=\"card-comp\" onClick={setActiveChartData}>\r\n            <CardActionArea>\r\n                <CardContent>\r\n                    <Typography className=\"card-name\" gutterBottom>\r\n                        Temp:\r\n                    </Typography>\r\n                    <Typography className=\"card-value\" gutterBottom>\r\n                        {(props.temperatureType === 'celsius') ? props.cardData.tempC : props.cardData.tempF}\r\n                    </Typography>\r\n                    <Typography className=\"card-name\" gutterBottom>\r\n                        Date:\r\n                    </Typography>\r\n                    <Typography className=\"card-value\" gutterBottom>\r\n                        {props.cardData.displayDate}\r\n                    </Typography>\r\n                    <Typography className=\"card-name\" gutterBottom>\r\n                        Humidity:\r\n                         </Typography>\r\n                    <Typography className=\"card-value\" gutterBottom>\r\n                        {props.cardData.humidity}\r\n                    </Typography>\r\n                    <Typography className=\"card-name\" gutterBottom>\r\n                        Weather:\r\n                    </Typography>\r\n                    <Typography gutterBottom className=\"content-ellipsis card-value\">\r\n                        {props.cardData.weather}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n}\r\n\r\nCardComponent.propTypes = {\r\n    cardData: PropTypes.shape({\r\n        chartDataC: PropTypes.array.isRequired,\r\n        chartDataF: PropTypes.array.isRequired,\r\n        date: PropTypes.string.isRequired,\r\n        displayDate: PropTypes.string.isRequired,\r\n        humidity: PropTypes.number.isRequired,\r\n        tempC: PropTypes.string.isRequired,\r\n        tempF: PropTypes.string.isRequired,\r\n        weather: PropTypes.string.isRequired,\r\n        weatherArr: PropTypes.array.isRequired,\r\n        fragmentsC: PropTypes.array.isRequired,\r\n        fragmentsF: PropTypes.array.isRequired,\r\n    }).isRequired,\r\n    onSelect: PropTypes.func.isRequired,\r\n    temperatureType: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default React.memo(CardComponent);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Chart } from \"react-google-charts\";\r\n\r\nconst BarChart = (props) => {\r\n  return (\r\n    <Chart\r\n      height={'240px'}\r\n      chartType=\"Bar\"\r\n      loader={<div className=\"chart-loader\">Loading Chart ...</div>}\r\n      data={(props.temperatureType === 'celsius') ? props.chartData.chartDataC : props.chartData.chartDataF}\r\n      options={{\r\n        legend: { position: 'none' },\r\n      }}\r\n      rootProps={{ 'data-testid': '2' }}\r\n    />\r\n  );\r\n}\r\n\r\nBarChart.propTypes = {\r\n  chartData: PropTypes.shape({\r\n    chartDataC: PropTypes.array.isRequired,\r\n    chartDataF: PropTypes.array.isRequired,\r\n    date: PropTypes.string.isRequired,\r\n    displayDate: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    tempC: PropTypes.string.isRequired,\r\n    tempF: PropTypes.string.isRequired,\r\n    weather: PropTypes.string.isRequired,\r\n    weatherArr: PropTypes.array.isRequired,\r\n    fragmentsC: PropTypes.array.isRequired,\r\n    fragmentsF: PropTypes.array.isRequired,\r\n  }).isRequired,\r\n  temperatureType: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default BarChart;","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst LoadingScreen = () => {\r\n  return (\r\n    <div className=\"loader-content center-content\">\r\n      <div className=\"loader-text\">Loading ...</div>\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoadingScreen;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notify = (props) => {\r\n    if (props.error)\r\n        console.error(props.error);\r\n    return (\r\n        <div className=\"center-content notify-content\">\r\n            <h1 className={props.classVal}>{props.message}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nNotify.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n    classVal: PropTypes.string,\r\n    error: PropTypes.object\r\n}\r\n\r\nexport default Notify;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CardComponent from './Card';\r\nimport BarChart from './BarChart';\r\nimport LoadingScreen from './LoadingScreen';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowBackTwoTone from '@material-ui/icons/ArrowBackTwoTone';\r\nimport ArrowForwardTwoTone from '@material-ui/icons/ArrowForwardTwoTone';\r\nimport Notify from './Notify';\r\n\r\nclass WeatherView extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.temperatureChange = this.temperatureChange.bind(this);\r\n      this.backwardClick = this.backwardClick.bind(this);\r\n      this.forwardClick = this.forwardClick.bind(this);\r\n      this.setBarChart = this.setBarChart.bind(this);\r\n      this.materialClasses = makeStyles(theme => ({\r\n         root: {\r\n            flexGrow: 1,\r\n         }\r\n      }));\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.props.getWeatherData();\r\n   }\r\n\r\n   componentDidUpdate() {\r\n      if (this.props.weatherData.length > 0 && !this.props.loading && this.props.curPageData.length === 0)\r\n         this.props.getPageData(0);\r\n   }\r\n\r\n   forwardClick() {\r\n      this.props.getPageData(this.props.curPageIndex + 1);\r\n   }\r\n\r\n   backwardClick() {\r\n      this.props.getPageData(this.props.curPageIndex - 1);\r\n   }\r\n\r\n   setBarChart(cardData) {\r\n      this.props.getActiveChartData(cardData);\r\n   }\r\n\r\n   temperatureChange(event) {\r\n      this.props.getCurTempType(event.target.value);\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"weather-view-container\">\r\n            {\r\n               (this.props.curPageData.length > 0) ? (\r\n                  <div className=\"weather-view\">\r\n                     <div className={this.materialClasses.root}>\r\n                        <Grid container>\r\n                           <Grid className=\"temp-type-container\" item xs={12}>\r\n                              <FormControl component=\"fieldset\">\r\n                                 <RadioGroup className=\"temp-radio-group\" aria-label=\"Select Temperature Type\" name=\"temperature-type\" value={this.props.temperatureType} onChange={this.temperatureChange} row>\r\n                                    <FormControlLabel\r\n                                       value=\"celsius\"\r\n                                       control={<Radio color=\"primary\" />}\r\n                                       label=\"Celsius\"\r\n                                       labelPlacement=\"end\"\r\n                                       className=\"celsius\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                       value=\"fahrenheit\"\r\n                                       control={<Radio color=\"primary\" />}\r\n                                       label=\"Fahrenheit\"\r\n                                       labelPlacement=\"end\"\r\n                                       className=\"fahrenheit\"\r\n                                    />\r\n                                 </RadioGroup>\r\n                              </FormControl>\r\n                           </Grid>\r\n                           <Grid className=\"arrow-container left\" item xs={6}>\r\n                              {(this.props.curPageIndex > 0) ?\r\n                                 (<IconButton color=\"primary\" aria-label=\"Left Arrow\" onClick={this.backwardClick}>\r\n                                    <ArrowBackTwoTone fontSize=\"large\" />\r\n                                 </IconButton>) : null\r\n                              }\r\n                           </Grid>\r\n                           <Grid className=\"arrow-container right\" item xs={6}>\r\n                              {(((this.props.curPageIndex * this.props.pageSize) + this.props.pageSize) < this.props.weatherData.length) ?\r\n                                 (<IconButton color=\"primary\" aria-label=\"Right Arrow\" onClick={this.forwardClick}>\r\n                                    <ArrowForwardTwoTone fontSize=\"large\" />\r\n                                 </IconButton>) : null\r\n                              }\r\n                           </Grid>\r\n                           {\r\n                              this.props.curPageData.map((obj, index) => <Grid className={(Object.keys(this.props.activeChartData).length > 0 && obj.date === this.props.activeChartData.date) ? 'card-active grid-card' : 'grid-card'} key={index} item xs={4}><CardComponent cardData={obj} onSelect={this.setBarChart} temperatureType={this.props.temperatureType} /></Grid>)\r\n                           }\r\n                           <Grid className=\"bar-chart-container\" item xs={12}>\r\n                              {\r\n                                 (Object.keys(this.props.activeChartData).length > 0) ? <BarChart chartData={this.props.activeChartData} temperatureType={this.props.temperatureType} /> : <div className=\"bar-chart-notify\">Please select a card to show temperature fragments in a Bar Chart.</div>\r\n                              }\r\n\r\n                           </Grid>\r\n                        </Grid>\r\n                     </div>\r\n                  </div>) : (\r\n                     (this.props.hasError) ?\r\n                        <Notify classVal=\"alert-red\" error={this.props.error} message=\"Something went wrong. Sorry, we can't show weather information at this time.\" /> :\r\n                        (!this.props.loading && this.props.weatherData.length === 0) ? <Notify message=\"No weather forecasts avaialble.\" /> : <LoadingScreen />)\r\n            }\r\n         </div>);\r\n   }\r\n}\r\n\r\nWeatherView.propTypes = {\r\n   weatherData: PropTypes.arrayOf(PropTypes.shape({\r\n      chartDataC: PropTypes.array.isRequired,\r\n      chartDataF: PropTypes.array.isRequired,\r\n      date: PropTypes.string.isRequired,\r\n      displayDate: PropTypes.string.isRequired,\r\n      humidity: PropTypes.number.isRequired,\r\n      tempC: PropTypes.string.isRequired,\r\n      tempF: PropTypes.string.isRequired,\r\n      weather: PropTypes.string.isRequired,\r\n      weatherArr: PropTypes.array.isRequired,\r\n      fragmentsC: PropTypes.array.isRequired,\r\n      fragmentsF: PropTypes.array.isRequired,\r\n   })),\r\n   curPageData: PropTypes.arrayOf(PropTypes.shape({\r\n      chartDataC: PropTypes.array.isRequired,\r\n      chartDataF: PropTypes.array.isRequired,\r\n      date: PropTypes.string.isRequired,\r\n      displayDate: PropTypes.string.isRequired,\r\n      humidity: PropTypes.number.isRequired,\r\n      tempC: PropTypes.string.isRequired,\r\n      tempF: PropTypes.string.isRequired,\r\n      weather: PropTypes.string.isRequired,\r\n      weatherArr: PropTypes.array.isRequired,\r\n      fragmentsC: PropTypes.array.isRequired,\r\n      fragmentsF: PropTypes.array.isRequired,\r\n   })),\r\n   temperatureType: PropTypes.string.isRequired,\r\n   curPageIndex: PropTypes.number.isRequired,\r\n   loading: PropTypes.bool.isRequired,\r\n   hasError: PropTypes.bool.isRequired,\r\n   error: PropTypes.object,\r\n   activeChartData: PropTypes.object,\r\n   pageSize: PropTypes.number.isRequired,\r\n   getPageData: PropTypes.func.isRequired,\r\n   getActiveChartData: PropTypes.func.isRequired,\r\n   getCurTempType: PropTypes.func.isRequired,\r\n   getWeatherData: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default WeatherView;","import { connect } from 'react-redux';\r\nimport WeatherView from '../components/WeatherView';\r\nimport { getWeatherData, getPageData, getActiveChartData, getCurTempType} from '../actions';\r\n\r\nconst mapStateToProps = state => ({\r\n    weatherData: state.weatherData,\r\n    curPageData: state.curPageData,\r\n    temperatureType: state.temperatureType,\r\n    curPageIndex: state.curPageIndex,\r\n    loading: state.loading,\r\n    hasError: state.hasError,\r\n    error: state.error,\r\n    activeChartData: state.activeChartData,\r\n    pageSize: state.pageSize\r\n});\r\n\r\n//const mapStateToProps = state => state;\r\n\r\nconst mapDispatchToProps = {\r\n    getPageData: index => getPageData(index),\r\n    getActiveChartData: data => getActiveChartData(data),\r\n    getCurTempType: data => getCurTempType(data),\r\n    getWeatherData: getWeatherData,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(WeatherView)\r\n","export const getWeatherData = () => ({\r\n    type: 'GET_WEATHER_DATA'\r\n});\r\n\r\nexport const getPageData = (index) => ({\r\n    type: 'GET_PAGE_DATA',\r\n    pageIndex: index\r\n});\r\n\r\nexport const getActiveChartData = (data) => ({\r\n    type: 'GET_ACTIVE_CHART_DATA',\r\n    chartData: data\r\n});\r\n\r\nexport const getCurTempType = (data) => ({\r\n    type: 'GET_TEMP_TYPE',\r\n    temperatureType: data\r\n});","const reducer = (state = { weatherData: [], curPageData: [], temperatureType: 'fahrenheit', curPageIndex: 0, loading: false, hasError: false, error: {}, activeChartData: {}, pageSize: 3 }, action) => {\r\n    switch (action.type) {\r\n        case 'GET_WEATHER_DATA':\r\n            return { ...state, loading: true };\r\n        case 'WEATHER_DATA_RECEIVED':\r\n            return { ...state, weatherData: [...action.data], loading: false };\r\n        case 'WEATHER_DATA_FAILED':\r\n            return { ...state, hasError: true, error: action.error, loading: false };\r\n        case 'GET_PAGE_DATA':\r\n            const startIndex = action.pageIndex * state.pageSize;\r\n            return { ...state, curPageIndex: action.pageIndex, curPageData: [...state.weatherData.slice(startIndex, startIndex + state.pageSize)], activeChartData: {} };\r\n        case 'GET_TEMP_TYPE':\r\n            return { ...state, temperatureType: action.temperatureType };\r\n        case 'GET_ACTIVE_CHART_DATA':\r\n            return { ...state, activeChartData: action.chartData };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default reducer;","import { put, takeLatest, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nexport function* fetchWeatherData() {\r\n    try {\r\n        const res = yield call(axios.get, 'https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40');\r\n        if (res.data.cod === '200')\r\n            yield put({ type: \"WEATHER_DATA_RECEIVED\", data: formatWeatherData(res.data) });\r\n        else\r\n            yield put({ type: 'WEATHER_DATA_FAILED', error: res });\r\n    }\r\n    catch (error) {\r\n        yield put({ type: 'WEATHER_DATA_FAILED', error });\r\n    }\r\n}\r\n\r\nfunction formatWeatherData(res) {\r\n    let weatherData = [], months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n    for (let i = 0; i < res.list.length; i++) {\r\n        let date = res.list[i].dt_txt.split(' ')[0], index, tempF, tempC;\r\n        tempF = (res.list[i].main.temp - 273.15) * (9 / 5) + 32; // Kelvin to Fahrenheit\r\n        tempC = res.list[i].main.temp - 273.15; // Kelvin to Celsius\r\n        index = weatherData.findIndex((obj) => date === obj.date);\r\n        if (index > -1) {\r\n            weatherData[index].humidity.push(res.list[i].main.humidity);\r\n            weatherData[index].fragmentsF.push(tempF);\r\n            weatherData[index].fragmentsC.push(tempC);\r\n            if (res.list[i].weather.length > 0) {\r\n                let wIndex = weatherData[index].weatherArr.findIndex((obj) => res.list[i].weather[0].description === obj.weather);\r\n                if (wIndex > -1)\r\n                    weatherData[index].weatherArr[wIndex].count += 1;\r\n                else\r\n                    weatherData[index].weatherArr.push({ weather: res.list[i].weather[0].description, count: 1 });\r\n            }\r\n        } else {\r\n            let obj = { date: date, humidity: [res.list[i].main.humidity], weatherArr: [], fragmentsF: [tempF], fragmentsC: [tempC] };\r\n            if (res.list[i].weather.length > 0)\r\n                obj.weatherArr = [{ weather: res.list[i].weather[0].description, count: 1 }]\r\n            weatherData.push(obj);\r\n        }\r\n    }\r\n    for (let index = 0; index < weatherData.length; index++) {\r\n        weatherData[index].tempF = Math.ceil(weatherData[index].fragmentsF.reduce((prev, cur) => prev + cur, 0) / weatherData[index].fragmentsF.length) + \"F\";\r\n        weatherData[index].tempC = Math.ceil(weatherData[index].fragmentsC.reduce((prev, cur) => prev + cur, 0) / weatherData[index].fragmentsC.length) + \"C\";\r\n        weatherData[index].humidity = Math.ceil(weatherData[index].humidity.reduce((prev, cur) => prev + cur, 0) / weatherData[index].humidity.length);\r\n        if (weatherData[index].weatherArr.length > 0)\r\n            weatherData[index].weather = weatherData[index].weatherArr.sort((a, b) => b.count - a.count)[0].weather;\r\n        weatherData[index].displayDate = weatherData[index].date.split('-')[2] + \" \" + months[Number(weatherData[index].date.split('-')[1] - 1)] + \" \" + weatherData[index].date.split('-')[0].slice(2, 4);\r\n        weatherData[index].chartDataC = [];\r\n        weatherData[index].chartDataF = [];\r\n        weatherData[index].chartDataC.push(['C', 'Temp']);\r\n        weatherData[index].chartDataF.push(['F', 'Temp']);\r\n        for (let j = 0; j < weatherData[index].fragmentsF.length; j++) {\r\n            weatherData[index].chartDataF.push([Math.ceil(weatherData[index].fragmentsF[j]) + 'F', Math.ceil(weatherData[index].fragmentsF[j])]);\r\n            weatherData[index].chartDataC.push([Math.ceil(weatherData[index].fragmentsC[j]) + 'C', Math.ceil(weatherData[index].fragmentsC[j])]);\r\n        }\r\n    }\r\n    return weatherData;\r\n}\r\n\r\nfunction* fetchWeatherWatch() {\r\n    yield takeLatest('GET_WEATHER_DATA', fetchWeatherData);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield fetchWeatherWatch();\r\n}","import React from 'react';\nimport WeatherViewContainer from '../contianers/WeatherViewContainer';\nimport createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware } from 'redux';\nimport { logger } from 'redux-logger';\nimport { Provider } from 'react-redux';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware, logger)\n);\nsagaMiddleware.run(rootSaga);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <CssBaseline />\n        <WeatherViewContainer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}